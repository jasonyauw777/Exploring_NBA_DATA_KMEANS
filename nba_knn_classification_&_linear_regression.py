# -*- coding: utf-8 -*-
"""NBA_KNN_CLASSIFICATION_&_LINEAR_REGRESSION.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mPAzqR51DSlBagd2AIyRQx80_2DGMC2l
"""

# import all necesarry libraries
import pandas as pd
import seaborn as sb
import matplotlib.pyplot as plt

# Load CSV file from my google drive 

from google.colab import drive
drive.mount('/content/drive')

# CSV file from Basketball Reference
# Link - https://www.basketball-reference.com/leagues/NBA_2021_per_game.html
path = "/content/drive/MyDrive/Colab Notebooks/NBA_ML_PROJECT/NBA_PER_GAME_STATS_2020_2021_REGULAR_SEASON.csv"

nba_df = pd.read_csv(path)

nba_df.head(10)

# delete unnecessary column
nba_df = nba_df.drop(["Rk"], axis=1)
nba_df.head(10)

# get the number of rows and columns
nba_df.shape

# get the mean value of each row
nba_df.mean()

# Drop rows with missing data
nba_cleaned = nba_df.dropna()

nba_cleaned[nba_cleaned['G']<10].index

# Remove players who played less than 10 games
less_than_ten_games = nba_cleaned[nba_cleaned['G']<10].index

nba_cleaned.drop(less_than_ten_games, inplace = True)
nba_cleaned

# Retrieve all numeric data
nba_numeric_data = nba_cleaned._get_numeric_data()
nba_numeric_data

# dataframe after cleaning 
nba_numeric_data.describe()

# Make Clusters of players with kmeans
from sklearn.cluster import KMeans
# Model Training
kmeans_model = KMeans(n_clusters=5, random_state = 1)
# Fit the data to the model
kmeans_model.fit(nba_numeric_data)
# Get the labels 
labels = kmeans_model.labels_ 
labels

# Plot players by cluster
from sklearn.decomposition import PCA
# Reduce dimensionality of data to 2 dimensions
pca_2 = PCA(2)
plot_data = pca_2.fit_transform(nba_numeric_data)
plt.scatter(x=plot_data[:,0],y=plot_data[:,1], c=labels)
plt.show

# LeBron James
LeBron = nba_numeric_data.loc[nba_df["Player"] == "LeBron James\jamesle01",:]
LeBron

# Kevin Durant
KD = nba_numeric_data.loc[nba_df["Player"] == "Kevin Durant\duranke01",:]
KD

# Steph Curry
Steph = nba_numeric_data.loc[nba_df["Player"] == "Stephen Curry\curryst01",:]
Steph

# Nikola Jokic
Joker = nba_numeric_data.loc[nba_df["Player"] == "Nikola Jokić\jokicni01",:]
Joker

# Joel Embiid
Embiid = nba_numeric_data.loc[nba_df["Player"] == "Joel Embiid\embiijo01",:]
Embiid

# Greek Freak
GreekFreak = nba_numeric_data.loc[nba_df["PTS"] == 28.1,:]
GreekFreak

# Luka Doncic
Wonderboy = nba_numeric_data.loc[nba_df["Player"] == "Luka Dončić\doncilu01",:]
Wonderboy

# Converting the individual dataframes to list
LeBron_list = LeBron.values.tolist()
KD_list = KD.values.tolist()
Steph_list = Steph.values.tolist()
Joker_list = Joker.values.tolist()
Embiid_list = Embiid.values.tolist()
GreekFreak_list = GreekFreak.values.tolist()
Wonderboy_list = Wonderboy.values.tolist()

# Cluster classification of the players
LeBron_Cluster = kmeans_model.predict(LeBron_list)
KD_Cluster = kmeans_model.predict(KD_list)
Steph_Cluster = kmeans_model.predict(Steph_list)
Joker_Cluster = kmeans_model.predict(Joker_list)
Embiid_Cluster = kmeans_model.predict(Embiid_list)
GreekFreak_Cluster = kmeans_model.predict(GreekFreak_list)
Wonderboy_Cluster = kmeans_model.predict(Wonderboy_list)
# Print the cluster labels
print(LeBron_Cluster)
print(KD_Cluster)
print(Steph_Cluster)
print(Joker_Cluster)
print(Embiid_Cluster)
print(GreekFreak_Cluster)
print(Wonderboy_Cluster)

# Correlation between the variables
nba_numeric_data.corr()

from sklearn.model_selection import train_test_split

# Split data to 30% testing and 70% training
# Trying to predict TRB(Total Rebounds) with DRB(Defensive Rebounds)
x_train, x_test, y_train, y_test = train_test_split(nba_numeric_data[["TRB"]],nba_numeric_data[["DRB"]], test_size=0.3, random_state=2)

from sklearn.linear_model import LinearRegression
# Create Linear Regression model
lr = LinearRegression()
# Train the model with training data
lr.fit(x_train, y_train)
# Test the model with test data
predictions = lr.predict(x_test)

from sklearn.metrics import r2_score

# Model Accuracy
lr_score_test = lr.score(x_test, y_test)

r2_score_test = r2_score(y_test,predictions)

print("lr_score: ", lr_score_test)
print("r2_score : ", r2_score_test)
# DRB is an accurate predictor of TRB